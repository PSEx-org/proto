# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

from common import common_pb2 as common__pb2
from market_data import market_data_pb2 as market__data__pb2

GRPC_GENERATED_VERSION = '1.70.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in market_data_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class MarketDataServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetOrderBook = channel.unary_stream(
                '/market_data.MarketDataService/GetOrderBook',
                request_serializer=market__data__pb2.GetSymbol.SerializeToString,
                response_deserializer=market__data__pb2.OrderBook.FromString,
                _registered_method=True)
        self.GetTrades = channel.unary_stream(
                '/market_data.MarketDataService/GetTrades',
                request_serializer=market__data__pb2.GetSymbol.SerializeToString,
                response_deserializer=market__data__pb2.Trade.FromString,
                _registered_method=True)
        self.GetUnderlier = channel.unary_stream(
                '/market_data.MarketDataService/GetUnderlier',
                request_serializer=market__data__pb2.GetSymbol.SerializeToString,
                response_deserializer=market__data__pb2.Underlier.FromString,
                _registered_method=True)
        self.GetFundingRate = channel.unary_stream(
                '/market_data.MarketDataService/GetFundingRate',
                request_serializer=market__data__pb2.GetSymbol.SerializeToString,
                response_deserializer=market__data__pb2.FundingRate.FromString,
                _registered_method=True)
        self.GetRefData = channel.unary_unary(
                '/market_data.MarketDataService/GetRefData',
                request_serializer=common__pb2.Empty.SerializeToString,
                response_deserializer=market__data__pb2.RefData.FromString,
                _registered_method=True)
        self.GetBbo = channel.unary_stream(
                '/market_data.MarketDataService/GetBbo',
                request_serializer=common__pb2.Empty.SerializeToString,
                response_deserializer=market__data__pb2.OrderBook.FromString,
                _registered_method=True)
        self.GetLatestCandle = channel.unary_stream(
                '/market_data.MarketDataService/GetLatestCandle',
                request_serializer=market__data__pb2.GetCandle.SerializeToString,
                response_deserializer=market__data__pb2.Candle.FromString,
                _registered_method=True)


class MarketDataServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def GetOrderBook(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetTrades(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetUnderlier(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetFundingRate(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetRefData(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetBbo(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetLatestCandle(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_MarketDataServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetOrderBook': grpc.unary_stream_rpc_method_handler(
                    servicer.GetOrderBook,
                    request_deserializer=market__data__pb2.GetSymbol.FromString,
                    response_serializer=market__data__pb2.OrderBook.SerializeToString,
            ),
            'GetTrades': grpc.unary_stream_rpc_method_handler(
                    servicer.GetTrades,
                    request_deserializer=market__data__pb2.GetSymbol.FromString,
                    response_serializer=market__data__pb2.Trade.SerializeToString,
            ),
            'GetUnderlier': grpc.unary_stream_rpc_method_handler(
                    servicer.GetUnderlier,
                    request_deserializer=market__data__pb2.GetSymbol.FromString,
                    response_serializer=market__data__pb2.Underlier.SerializeToString,
            ),
            'GetFundingRate': grpc.unary_stream_rpc_method_handler(
                    servicer.GetFundingRate,
                    request_deserializer=market__data__pb2.GetSymbol.FromString,
                    response_serializer=market__data__pb2.FundingRate.SerializeToString,
            ),
            'GetRefData': grpc.unary_unary_rpc_method_handler(
                    servicer.GetRefData,
                    request_deserializer=common__pb2.Empty.FromString,
                    response_serializer=market__data__pb2.RefData.SerializeToString,
            ),
            'GetBbo': grpc.unary_stream_rpc_method_handler(
                    servicer.GetBbo,
                    request_deserializer=common__pb2.Empty.FromString,
                    response_serializer=market__data__pb2.OrderBook.SerializeToString,
            ),
            'GetLatestCandle': grpc.unary_stream_rpc_method_handler(
                    servicer.GetLatestCandle,
                    request_deserializer=market__data__pb2.GetCandle.FromString,
                    response_serializer=market__data__pb2.Candle.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'market_data.MarketDataService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('market_data.MarketDataService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class MarketDataService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def GetOrderBook(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/market_data.MarketDataService/GetOrderBook',
            market__data__pb2.GetSymbol.SerializeToString,
            market__data__pb2.OrderBook.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetTrades(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/market_data.MarketDataService/GetTrades',
            market__data__pb2.GetSymbol.SerializeToString,
            market__data__pb2.Trade.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetUnderlier(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/market_data.MarketDataService/GetUnderlier',
            market__data__pb2.GetSymbol.SerializeToString,
            market__data__pb2.Underlier.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetFundingRate(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/market_data.MarketDataService/GetFundingRate',
            market__data__pb2.GetSymbol.SerializeToString,
            market__data__pb2.FundingRate.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetRefData(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/market_data.MarketDataService/GetRefData',
            common__pb2.Empty.SerializeToString,
            market__data__pb2.RefData.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetBbo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/market_data.MarketDataService/GetBbo',
            common__pb2.Empty.SerializeToString,
            market__data__pb2.OrderBook.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetLatestCandle(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/market_data.MarketDataService/GetLatestCandle',
            market__data__pb2.GetCandle.SerializeToString,
            market__data__pb2.Candle.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
