// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: market_data.proto

package market_data

import (
	context "context"
	common "github.com/QFEX-org/proto/common"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	MarketDataService_GetOrderBook_FullMethodName    = "/market_data.MarketDataService/GetOrderBook"
	MarketDataService_GetTrades_FullMethodName       = "/market_data.MarketDataService/GetTrades"
	MarketDataService_GetUnderlier_FullMethodName    = "/market_data.MarketDataService/GetUnderlier"
	MarketDataService_GetFundingRate_FullMethodName  = "/market_data.MarketDataService/GetFundingRate"
	MarketDataService_GetRefData_FullMethodName      = "/market_data.MarketDataService/GetRefData"
	MarketDataService_GetBbo_FullMethodName          = "/market_data.MarketDataService/GetBbo"
	MarketDataService_GetLatestCandle_FullMethodName = "/market_data.MarketDataService/GetLatestCandle"
)

// MarketDataServiceClient is the client API for MarketDataService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MarketDataServiceClient interface {
	GetOrderBook(ctx context.Context, in *GetSymbol, opts ...grpc.CallOption) (grpc.ServerStreamingClient[OrderBook], error)
	GetTrades(ctx context.Context, in *GetSymbol, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Trade], error)
	GetUnderlier(ctx context.Context, in *GetSymbol, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Underlier], error)
	GetFundingRate(ctx context.Context, in *GetSymbol, opts ...grpc.CallOption) (grpc.ServerStreamingClient[FundingRate], error)
	GetRefData(ctx context.Context, in *common.Empty, opts ...grpc.CallOption) (*RefData, error)
	GetBbo(ctx context.Context, in *common.Empty, opts ...grpc.CallOption) (grpc.ServerStreamingClient[OrderBook], error)
	GetLatestCandle(ctx context.Context, in *GetCandle, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Candle], error)
}

type marketDataServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMarketDataServiceClient(cc grpc.ClientConnInterface) MarketDataServiceClient {
	return &marketDataServiceClient{cc}
}

func (c *marketDataServiceClient) GetOrderBook(ctx context.Context, in *GetSymbol, opts ...grpc.CallOption) (grpc.ServerStreamingClient[OrderBook], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &MarketDataService_ServiceDesc.Streams[0], MarketDataService_GetOrderBook_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[GetSymbol, OrderBook]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type MarketDataService_GetOrderBookClient = grpc.ServerStreamingClient[OrderBook]

func (c *marketDataServiceClient) GetTrades(ctx context.Context, in *GetSymbol, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Trade], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &MarketDataService_ServiceDesc.Streams[1], MarketDataService_GetTrades_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[GetSymbol, Trade]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type MarketDataService_GetTradesClient = grpc.ServerStreamingClient[Trade]

func (c *marketDataServiceClient) GetUnderlier(ctx context.Context, in *GetSymbol, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Underlier], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &MarketDataService_ServiceDesc.Streams[2], MarketDataService_GetUnderlier_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[GetSymbol, Underlier]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type MarketDataService_GetUnderlierClient = grpc.ServerStreamingClient[Underlier]

func (c *marketDataServiceClient) GetFundingRate(ctx context.Context, in *GetSymbol, opts ...grpc.CallOption) (grpc.ServerStreamingClient[FundingRate], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &MarketDataService_ServiceDesc.Streams[3], MarketDataService_GetFundingRate_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[GetSymbol, FundingRate]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type MarketDataService_GetFundingRateClient = grpc.ServerStreamingClient[FundingRate]

func (c *marketDataServiceClient) GetRefData(ctx context.Context, in *common.Empty, opts ...grpc.CallOption) (*RefData, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RefData)
	err := c.cc.Invoke(ctx, MarketDataService_GetRefData_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketDataServiceClient) GetBbo(ctx context.Context, in *common.Empty, opts ...grpc.CallOption) (grpc.ServerStreamingClient[OrderBook], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &MarketDataService_ServiceDesc.Streams[4], MarketDataService_GetBbo_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[common.Empty, OrderBook]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type MarketDataService_GetBboClient = grpc.ServerStreamingClient[OrderBook]

func (c *marketDataServiceClient) GetLatestCandle(ctx context.Context, in *GetCandle, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Candle], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &MarketDataService_ServiceDesc.Streams[5], MarketDataService_GetLatestCandle_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[GetCandle, Candle]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type MarketDataService_GetLatestCandleClient = grpc.ServerStreamingClient[Candle]

// MarketDataServiceServer is the server API for MarketDataService service.
// All implementations must embed UnimplementedMarketDataServiceServer
// for forward compatibility.
type MarketDataServiceServer interface {
	GetOrderBook(*GetSymbol, grpc.ServerStreamingServer[OrderBook]) error
	GetTrades(*GetSymbol, grpc.ServerStreamingServer[Trade]) error
	GetUnderlier(*GetSymbol, grpc.ServerStreamingServer[Underlier]) error
	GetFundingRate(*GetSymbol, grpc.ServerStreamingServer[FundingRate]) error
	GetRefData(context.Context, *common.Empty) (*RefData, error)
	GetBbo(*common.Empty, grpc.ServerStreamingServer[OrderBook]) error
	GetLatestCandle(*GetCandle, grpc.ServerStreamingServer[Candle]) error
	mustEmbedUnimplementedMarketDataServiceServer()
}

// UnimplementedMarketDataServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMarketDataServiceServer struct{}

func (UnimplementedMarketDataServiceServer) GetOrderBook(*GetSymbol, grpc.ServerStreamingServer[OrderBook]) error {
	return status.Errorf(codes.Unimplemented, "method GetOrderBook not implemented")
}
func (UnimplementedMarketDataServiceServer) GetTrades(*GetSymbol, grpc.ServerStreamingServer[Trade]) error {
	return status.Errorf(codes.Unimplemented, "method GetTrades not implemented")
}
func (UnimplementedMarketDataServiceServer) GetUnderlier(*GetSymbol, grpc.ServerStreamingServer[Underlier]) error {
	return status.Errorf(codes.Unimplemented, "method GetUnderlier not implemented")
}
func (UnimplementedMarketDataServiceServer) GetFundingRate(*GetSymbol, grpc.ServerStreamingServer[FundingRate]) error {
	return status.Errorf(codes.Unimplemented, "method GetFundingRate not implemented")
}
func (UnimplementedMarketDataServiceServer) GetRefData(context.Context, *common.Empty) (*RefData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRefData not implemented")
}
func (UnimplementedMarketDataServiceServer) GetBbo(*common.Empty, grpc.ServerStreamingServer[OrderBook]) error {
	return status.Errorf(codes.Unimplemented, "method GetBbo not implemented")
}
func (UnimplementedMarketDataServiceServer) GetLatestCandle(*GetCandle, grpc.ServerStreamingServer[Candle]) error {
	return status.Errorf(codes.Unimplemented, "method GetLatestCandle not implemented")
}
func (UnimplementedMarketDataServiceServer) mustEmbedUnimplementedMarketDataServiceServer() {}
func (UnimplementedMarketDataServiceServer) testEmbeddedByValue()                           {}

// UnsafeMarketDataServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MarketDataServiceServer will
// result in compilation errors.
type UnsafeMarketDataServiceServer interface {
	mustEmbedUnimplementedMarketDataServiceServer()
}

func RegisterMarketDataServiceServer(s grpc.ServiceRegistrar, srv MarketDataServiceServer) {
	// If the following call pancis, it indicates UnimplementedMarketDataServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&MarketDataService_ServiceDesc, srv)
}

func _MarketDataService_GetOrderBook_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetSymbol)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MarketDataServiceServer).GetOrderBook(m, &grpc.GenericServerStream[GetSymbol, OrderBook]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type MarketDataService_GetOrderBookServer = grpc.ServerStreamingServer[OrderBook]

func _MarketDataService_GetTrades_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetSymbol)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MarketDataServiceServer).GetTrades(m, &grpc.GenericServerStream[GetSymbol, Trade]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type MarketDataService_GetTradesServer = grpc.ServerStreamingServer[Trade]

func _MarketDataService_GetUnderlier_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetSymbol)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MarketDataServiceServer).GetUnderlier(m, &grpc.GenericServerStream[GetSymbol, Underlier]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type MarketDataService_GetUnderlierServer = grpc.ServerStreamingServer[Underlier]

func _MarketDataService_GetFundingRate_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetSymbol)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MarketDataServiceServer).GetFundingRate(m, &grpc.GenericServerStream[GetSymbol, FundingRate]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type MarketDataService_GetFundingRateServer = grpc.ServerStreamingServer[FundingRate]

func _MarketDataService_GetRefData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketDataServiceServer).GetRefData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MarketDataService_GetRefData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketDataServiceServer).GetRefData(ctx, req.(*common.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _MarketDataService_GetBbo_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(common.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MarketDataServiceServer).GetBbo(m, &grpc.GenericServerStream[common.Empty, OrderBook]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type MarketDataService_GetBboServer = grpc.ServerStreamingServer[OrderBook]

func _MarketDataService_GetLatestCandle_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetCandle)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MarketDataServiceServer).GetLatestCandle(m, &grpc.GenericServerStream[GetCandle, Candle]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type MarketDataService_GetLatestCandleServer = grpc.ServerStreamingServer[Candle]

// MarketDataService_ServiceDesc is the grpc.ServiceDesc for MarketDataService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MarketDataService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "market_data.MarketDataService",
	HandlerType: (*MarketDataServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetRefData",
			Handler:    _MarketDataService_GetRefData_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetOrderBook",
			Handler:       _MarketDataService_GetOrderBook_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetTrades",
			Handler:       _MarketDataService_GetTrades_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetUnderlier",
			Handler:       _MarketDataService_GetUnderlier_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetFundingRate",
			Handler:       _MarketDataService_GetFundingRate_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetBbo",
			Handler:       _MarketDataService_GetBbo_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetLatestCandle",
			Handler:       _MarketDataService_GetLatestCandle_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "market_data.proto",
}
